---
# Custom installation for pyenv - Python version management

- name: "üêç Install pyenv - Python version management"
  block:
    - name: "üîç Check if pyenv is already installed"
      command: "{{ ansible_env.HOME }}/.pyenv/bin/pyenv --version"
      register: pyenv_check
      ignore_errors: yes
      changed_when: false

    - name: "üì¶ Install pyenv dependencies on macOS"
      when: ansible_os_family == "Darwin"
      homebrew:
        name:
          - openssl
          - readline
          - sqlite3
          - xz
          - zlib
          - tcl-tk
        state: present

    - name: "üì¶ Install pyenv dependencies on Ubuntu/Debian"
      when: platform_key in ['ubuntu', 'debian', 'wsl']
      become: yes
      package:
        name:
          - make
          - build-essential
          - libssl-dev
          - zlib1g-dev
          - libbz2-dev
          - libreadline-dev
          - libsqlite3-dev
          - wget
          - curl
          - llvm
          - libncursesw5-dev
          - xz-utils
          - tk-dev
          - libxml2-dev
          - libxmlsec1-dev
          - libffi-dev
          - liblzma-dev
        state: present

    - name: "üì¶ Install pyenv dependencies on RedHat/CentOS"
      when: platform_key == 'redhat'
      become: yes
      package:
        name:
          - gcc
          - zlib-devel
          - bzip2
          - bzip2-devel
          - readline-devel
          - sqlite
          - sqlite-devel
          - openssl-devel
          - tk-devel
          - libffi-devel
          - xz-devel
        state: present

    - name: "üîΩ Install pyenv via installer script"
      when: pyenv_check.rc != 0
      shell: |
        curl https://pyenv.run | bash
      args:
        creates: "{{ ansible_env.HOME }}/.pyenv"

    - name: "üìù Add pyenv to shell PATH"
      lineinfile:
        path: "{{ ansible_env.HOME }}/.{{ ansible_env.SHELL | basename }}rc"
        line: "{{ item }}"
        create: yes
      loop:
        - 'export PYENV_ROOT="$HOME/.pyenv"'
        - 'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"'
        - 'eval "$(pyenv init -)"'

    - name: "üîß Install Python versions"
      when: python_config.default_python_versions is defined
      shell: |
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init -)"
        pyenv install -s {{ item }}
      loop: "{{ python_config.default_python_versions | default(['3.11', '3.12']) }}"
      args:
        creates: "{{ ansible_env.HOME }}/.pyenv/versions/{{ item }}"

    - name: "üéØ Set global Python version"
      when: python_config.global_python_version is defined
      shell: |
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init -)"
        pyenv global {{ python_config.global_python_version | default('3.12') }}

- name: "‚úÖ Pyenv installation complete"
  debug:
    msg: |
      üêç Pyenv installed successfully
      üìÇ Location: {{ ansible_env.HOME }}/.pyenv
      üîß Global Python: {{ python_config.global_python_version | default('3.12') }}

      üí° Usage:
      - List versions: pyenv versions
      - Install version: pyenv install 3.11.0
      - Set global: pyenv global 3.11.0
      - Set local: pyenv local 3.11.0
