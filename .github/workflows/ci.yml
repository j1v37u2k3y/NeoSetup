name: 🚀 NeoSetup CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]  # Only run on main/develop merges
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly security scans
    - cron: '0 2 * * 1'
  workflow_dispatch:
    inputs:
      run_full_tests:
        description: 'Run full test suite including integration tests'
        required: false
        default: 'false'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  ANSIBLE_VERSION: '>=6.0,<8.0'
  MATRIX_MODE: enabled

jobs:
  # ============================================================================
  # STATIC ANALYSIS & LINTING
  # ============================================================================

  yaml-validation:
    name: 📋 YAML Validation
    runs-on: ubuntu-latest
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v5

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install YAML tools
        run: |
          pip install yamllint pyyaml jsonschema

      - name: 🔍 Validate YAML syntax
        run: |
          echo "🔍 Checking YAML syntax across the repository..."
          find . -name "*.yml" -o -name "*.yaml" | while read -r file; do
            echo "Validating: $file"
            python -c "import yaml; yaml.safe_load(open('$file'))" || exit 1
          done

      - name: 📏 Run yamllint
        run: |
          echo "🔍 Using project's .yamllint.yml configuration..."
          yamllint -c .yamllint.yml .

  ansible-lint:
    name: 🎭 Ansible Linting
    runs-on: ubuntu-latest
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v5

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Ansible and tools
        run: |
          pip install "ansible${{ env.ANSIBLE_VERSION }}" ansible-lint[yamllint]

      - name: 🎭 Run ansible-lint
        run: |
          cd neosetup
          ansible-lint --offline --format pep8 playbooks/ roles/
        continue-on-error: false

  python-quality:
    name: 🐍 Python Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v5

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Python tools
        run: |
          pip install black flake8 pylint mypy bandit safety

      - name: 🖤 Run Black formatter check
        run: |
          echo "🖤 Checking Python code formatting..."
          find . -name "*.py" -not -path "./.git/*" | xargs black --check --diff

      - name: 📏 Run Flake8 linter
        run: |
          echo "📏 Running Flake8 linting with pyproject.toml config..."
          flake8 $(find . -name "*.py" -not -path "./.git/*")

      - name: 🔍 Run Pylint
        run: |
          echo "🔍 Running Pylint analysis with pyproject.toml config..."
          find . -name "*.py" -not -path "./.git/*" | xargs pylint

      - name: 🛡️ Run Bandit security scan
        run: |
          echo "🛡️ Running Bandit security analysis..."
          bandit -r . --format txt

      - name: 🔒 Check dependencies for security issues
        run: |
          echo "🔒 Checking Python dependencies for security issues..."
          safety check || echo "⚠️ Security vulnerabilities found - should be addressed in future"

  shell-scripts:
    name: 🐚 Shell Script Quality
    runs-on: ubuntu-latest
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v5

      - name: 📦 Install ShellCheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: 🐚 Run ShellCheck
        run: |
          echo "🐚 Running ShellCheck on shell scripts..."
          find . -name "*.sh" -not -path "./.git/*" | while read -r script; do
            echo "Checking: $script"
            shellcheck -x "$script"
          done

          # Check shell scripts in templates
          find . -name "*.j2" -path "*/templates/*" -not -path "./.git/*" | while read -r template; do
            if grep -q '#!/bin/bash\|#!/bin/sh' "$template"; then
              echo "Checking template: $template"
              # Extract shell content and check (basic validation)
              grep -v '{{.*}}' "$template" > "/tmp/$(basename "$template").sh" || true
              if [ -s "/tmp/$(basename "$template").sh" ]; then
                shellcheck -x "/tmp/$(basename "$template").sh" || true
              fi
            fi
          done

  markdown-quality:
    name: 📝 Markdown Quality
    runs-on: ubuntu-latest
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v5

      - name: 📦 Install markdown tools
        run: |
          npm install -g markdownlint-cli markdown-link-check

      - name: 📝 Run markdownlint
        run: |
          echo "📝 Running Markdownlint with project configuration..."
          markdownlint -c .markdownlint.yml **/*.md || true

      - name: 🔗 Check markdown links
        run: |
          echo "🔗 Checking markdown links..."
          find . -name "*.md" -not -path "./.git/*" | while read -r file; do
            echo "Checking links in: $file"
            markdown-link-check "$file" --config .github/markdown-link-check.json || true
          done

  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================

  security-scan:
    name: 🛡️ Security Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v5

      - name: 🔍 Run CodeQL Analysis (Init)
        uses: github/codeql-action/init@v3
        with:
          languages: python
        continue-on-error: true  # Allow failure if code scanning not enabled

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        continue-on-error: true  # Allow failure if code scanning not enabled

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: 📤 Generate SARIF for GitHub Security (optional)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        if: always()

      - name: 📤 Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true  # Allow failure if code scanning not enabled

      - name: ℹ️ Security scanning status
        if: always()
        run: |
          echo "🔒 Security scanning completed with best effort"
          echo "⚠️ If CodeQL steps failed, enable code scanning in repository settings:"
          echo "   Settings → Security & analysis → Code scanning alerts → Enable"

  secret-scan:
    name: 🔐 Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 🔐 Run gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true  # Allow failure for non-critical secret detection

      - name: ℹ️ Secret scanning status
        if: always()
        run: |
          echo "🔐 Secret scanning completed"
          echo "ℹ️ Gitleaks checks for committed secrets and credentials"

  # ============================================================================
  # OPERATOR VALIDATION & TESTING
  # ============================================================================

  operator-validation:
    name: 🎯 Operator Validation
    runs-on: ubuntu-latest
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v5

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          pip install pyyaml jsonschema
      - name: ✅ Validate operator schemas
        run: |
          cd neosetup
          python3 scripts/validate_operator.py --all
      - name: 🧪 Run operator validation tests
        run: |
          cd neosetup
          python3 -m unittest tests.test_operator_validation -v

  # ============================================================================
  # ANSIBLE TESTING
  # ============================================================================

  ansible-syntax:
    name: 🎭 Ansible Syntax Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ansible-version: [ '6.0', '7.0' ]
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v5

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Ansible ${{ matrix.ansible-version }}
        run: |
          if [ "${{ matrix.ansible-version }}" = "6.0" ]; then
            pip install "ansible>=6.0,<7.0"
          elif [ "${{ matrix.ansible-version }}" = "7.0" ]; then
            pip install "ansible>=7.0,<8.0"
          else
            pip install "ansible>=${{ matrix.ansible-version }}"
          fi

      - name: ✅ Ansible syntax check
        run: |
          cd neosetup
          ansible-playbook playbooks/site.yml --syntax-check

      - name: 🔍 Check all playbooks
        run: |
          cd neosetup
          find playbooks -name "*.yml" | while read -r playbook; do
            echo "Checking syntax: $playbook"
            ansible-playbook "$playbook" --syntax-check
          done



  # ============================================================================
  # DOCUMENTATION VALIDATION
  # ============================================================================

  docs-validation:
    name: 📚 Documentation Validation
    runs-on: ubuntu-latest
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v5

      - name: 📚 Check documentation completeness
        run: |
          echo "📚 Checking documentation completeness..."

          # Check that all operators have README files
          for operator in neosetup/operators/*/; do
            operator_name=$(basename "$operator")
            if [ ! -f "$operator/README.md" ] && [ ! -f "$operator/vars.yml" ]; then
              echo "❌ Missing documentation for operator: $operator_name"
              exit 1
            fi
          done

          # Check that all roles have documentation
          for role in neosetup/roles/*/; do
            role_name=$(basename "$role")
            if [ ! -f "$role/README.md" ] && [ ! -f "$role/meta/main.yml" ]; then
              echo "⚠️ Missing documentation for role: $role_name"
            fi
          done

          echo "✅ Documentation completeness check passed"

  # ============================================================================
  # SUMMARY & REPORTING
  # ============================================================================

  test-summary:
    name: 📊 Test Summary
    runs-on: ubuntu-latest
    needs: [
      yaml-validation,
      ansible-lint,
      python-quality,
      shell-scripts,
      markdown-quality,
      security-scan,
      operator-validation,
      ansible-syntax,
      docs-validation
    ]
    if: always()
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v5

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📊 Generate test summary
        env:
          YAML_VALIDATION_RESULT: ${{ needs.yaml-validation.result }}
          ANSIBLE_LINT_RESULT: ${{ needs.ansible-lint.result }}
          PYTHON_QUALITY_RESULT: ${{ needs.python-quality.result }}
          SHELL_SCRIPTS_RESULT: ${{ needs.shell-scripts.result }}
          MARKDOWN_QUALITY_RESULT: ${{ needs.markdown-quality.result }}
          SECURITY_SCAN_RESULT: ${{ needs.security-scan.result }}
          SECRET_SCAN_RESULT: ${{ needs.secret-scan.result }}
          OPERATOR_VALIDATION_RESULT: ${{ needs.operator-validation.result }}
          ANSIBLE_SYNTAX_RESULT: ${{ needs.ansible-syntax.result }}
          DOCS_VALIDATION_RESULT: ${{ needs.docs-validation.result }}
        run: |
          python3 .github/scripts/generate_test_summary.py

      - name: 🎉 Success notification
        if: ${{ needs.yaml-validation.result == 'success'
            && needs.ansible-lint.result == 'success'
            && needs.operator-validation.result == 'success'
            && needs.ansible-syntax.result == 'success' }}
        run: |
          echo "🎉 All critical tests passed! NeoSetup is ready to rock! 🚀"
